{ my $data; }

grammar: { $data = $arg[0]; } <reject> | statement(s?) eof { $return = $item[2] }

statement: <skip: qr/[ \t]*/> (include|multiline_directive|hereto_directive|block_start|block_end|directive|skipline)

multiline_directive:
	/(.*?[\\][ \t]*\n)+.*/ eol
		{ $item[-2] =~ s/[\\][ \t]*\n//g; $return =
			$thisparser->directive($item[-2] . "\n",1, @arg) }

hereto_directive:
	key '<<' hereto_mark eol <skip: ''> hereto_line[$item[3]] eol
		{ $data->newDirective($item[1], [$item[6]]) }

directive:	key val(s) <commit> eol { $return = $data->newDirective($item[1], $item[2]) }
			| key eol { $return = $data->newDirective($item[1], [1]) }

block_start:
	'<' key block_val(s?) '>' eol 
		{ $return = $data->beginBlock($item[2], $item[3]) }

block_end: '</' key '>' eol
		{ $return = $data->endBlock($item[2]) }


include: /\binclude\b/i val eol { if ( $data->include ) { $text = $data->_loadFile($item[2]) . $text; } else { $return = undef; } }

#include_file: /(?i)include/ val eol { $text = $data->_loadFile($item[2]) . $text } 


skipline: comment | eol { 0 }


hereto_mark: val
hereto_line: /(.*?)$arg[0]/sm { $1 }

comment: '#' /.*/ eol { 0 }
key: /\w+/
val: quote | no_space
block_val: quote | /[^\s>]+/
#quote: <perl_quotelike> { $item[1][2] }
quote: /(['"])(.*?)(?<!\\)\1/s { $2 }
no_space: /\S+/
eol: /\n/
eof: /^\z/
